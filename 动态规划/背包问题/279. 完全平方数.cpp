// 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
// 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
// 输入：n = 12
// 输出：3 
// 解释：12 = 4 + 4 + 4

// 完全背包，求最小个数，遍历顺序无所谓
// 组合，先遍历物品再遍历背包
// 排列，要先遍历背包再遍历物品

class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n+1,n+1);
        dp[0] =0;
        dp[1] = 1;
        for(int j=2;j<=n;++j){//遍历背包
            for(int i=1;i<=int(sqrt(j));++i){//遍历物品
                dp[j] = min(dp[j],dp[j-i*i]+1);
            }       
        }
        return dp[n];
    }
};