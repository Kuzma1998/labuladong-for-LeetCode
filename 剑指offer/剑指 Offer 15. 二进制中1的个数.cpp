// 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。
// 提示：
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
// 并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
// 在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

// 思路1：逐个检查
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ans =0;
        for(int i=0;i<32;++i){
            if(n&(1<<i))//把32位里面的第i位制位1，其他变为0，与n作与号，若不为0则说明第i位为1；否则为0
                ++ans;
        }
        return ans;
    }
};

思路2：优化运算
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ret = 0;
        while (n) {
            n &= n - 1;//n的二进制位最低位的1置为0，置0的次数就是ans
            ret++;
        }
        return ret;
    }
};
